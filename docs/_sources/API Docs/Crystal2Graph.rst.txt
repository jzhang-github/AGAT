#############
Crystal2Graph
#############


.. py:class:: CrystalGraph(object)

   Read structural file and return a graph.

   .. Caution:: The constructed crystal graph may be unreasonable for high-entropy materials, if the connections are analyzed by Voronoi method.

   Code example::

      from Crystal2raph import CrystalGraph
      cg = CrystalGraph(cutoff = 6.0, mode_of_NN='distance', adsorbate=True)
      cg.get_graph('POSCAR')
   
   .. py:method:: __init__(self, cutoff=6.0, mode_of_NN='distance', adsorbate=True)

     :param float cutoff: Cutoff distance when calculate connections of a crystal.
     :param str mode_of_NN: 
     
        .. Hint:: 
           Mode of how to get the neighbors, which can be:
           
           - ``'voronoi'``: consider Voronoi neighbors only.
           - ``'pymatgen_dist'``: build graph based on a constant distance using ``pymatgen`` module.
           - ``'ase_dist'``: build graph based on a constant distance using ``ase`` module.
           - ``'ase_natural_cutoffs'``: build graph from ``ase`` which has a dynamic cutoff scheme. In this case, the ``cutoff`` is deprecated because ``ase`` will use the dynamic cutoffs in ``ase.neighborlist.natural_cutoffs()``.
           
     :param bool adsorbate: Identify the adsorbate or not.


   .. py:method:: get_adsorbate_bool(self, element_list)

      Identify adsorbates based on elements： H and O.
      
      :param list element_list: a list of element symbols.
      :return: a list of bool values.
      :rtype: tf.constant


   .. py:method:: get_crystal(self, crystal_fpath, super_cell=True)
   
      Read structural file and return a pymatgen crystal object.
      
      :param str crystal_fpath: the path to the crystal structural.
      :param bool super_cell: repeat the cell or not.
      :return: a pymatgen structure object.
      :rtype: ``pymatgen.core.structure``.
      
      
   .. py:method:: get_1NN_pairs_voronoi(self, crystal)

      The ``get_connections_new()`` of ``VoronoiConnectivity`` object is modified.
   
      :param pymatgen.core.structure crystal: a pymatgen structure object.
      :Returns: 
         - index of senders
         - index of receivers
         - a list of distance between senders and receivers


   .. py:method:: get_1NN_pairs_distance(self, crystal)
   
      Find the index of senders, receivers, and distance between them based on the ``distance_matrix`` of pymargen crystal object.
      
      :param pymargen.core.structure crystal: pymargen crystal object
      :Returns: 
         - index of senders
         - index of receivers
         - a list of distance between senders and receivers
      
   .. py:method:: get_1NN_pairs_ase_distance(self, ase_atoms)
   
      :param ase.atoms ase_atoms: ``ase.atoms`` object.
      :Returns: 
         - index of senders
         - index of receivers
         - a list of distance between senders and receivers
      
      
   .. py:method:: get_ndata(self, crystal)
   
      :param pymargen.core.structure crystal: a pymatgen crystal object.
      :return: ndata: the atomic representations of a crystal graph.
      :rtype: numpy.ndarray
      
      
   .. py:method:: get_graph_from_ase(self, fname, include_forces=False)
   
      Build graphs with ``ase``.
      
      :param str/``ase.Atoms`` fname: File name or ``ase.Atoms`` object.
      :param bool include_forces: Include forces into graphs or not.
      :return: A bidirectional graph with self-loop connection.
      
      
   .. py:method:: get_graph_from_pymatgen(self, crystal_fname, super_cell=True, include_forces=False)
   
      Build graphs with pymatgen.
      
      :param str crystal_fname: File name.
      :param bool super_cell: repeat small cell or not.
      :param bool include_forces: Include forces into graphs or not.
      :return: A bidirectional graph with self-loop connection.
      
      
   .. py:method:: get_graph(self, crystal_fname, super_cell=False, include_forces=True)
   
      This method can choose which graph-construction method is used, according to the ``mode_of_NN`` attribute.
      
      .. Hint:: You can call this method to build one graph.
   
      :param str crystal_fname: File name.
      :param bool super_cell: repeat small cell or not.
      :param bool include_forces: Include forces into graphs or not.
      :return: A bidirectional graph with self-loop connection.
      
      
      
.. py:class:: ReadGraphs(CrystalGraph)

   This object is used to build a list of graphs. Inherited from :py:class:`CrystalGraph`.
   
   .. Hint:: Property (or label) of each graph are loaded from csv file when build new graphs from scratch. On the other hand, they will be loaded from  the ``DGL`` binary file if all the graphs are loaded from the binary file.
   
   Code example::
   
      from modules.Crystal2Graph import ReadGraphs
      import os
      graph_reader = ReadGraphs('fname_prop.csv', # csv file generated above.
                                'dataset', # directory contain all frames
                                cutoff       = None, # We don't need this for 'ase_natural_cutoffs'.
                                mode_of_NN   = 'ase_natural_cutoffs', # identify connection between atoms with 'ase_natural_cutoffs'
                                from_binary  = False, # read from structural files
                                num_of_cores = 8, # run parallelly with 8 cores.
                                super_cell   = False) # do not repeat cell for small supercells.
      
      graph_list, graph_labels = graph_reader.read_all_graphs(scale_prop=False, # do not rescale the label.
                                                              ckpt_path='.') # save the information of how to build the graphs.
      
      train_index, validation_index, test_index = TrainValTestSplit(
          0.15, # validation_size: int or float. int: number of samples of the validation set. float: portion of samples of the validation set. 
          0.15, # test_size: int or float. int: number of samples of the validation set. float: portion of samples of the validation set. 
          os.path.join('files', 'dataset', 'fname_prop.csv'), # csv_file: str. File name of a csv file that contains the filenames of crystals.
          True)() # boolean. Split the dataset by `sklearn.model_selection.train_test_split` or loaded from previously saved txt files.


   .. py:method:: __init__(self, csv_file, dataset_path, cutoff=6.0, mode_of_NN='distance', from_binary=False, num_of_cores=1, super_cell=True, include_forces=True, adsorbate=True)
   
      :param str csv_file: File name of a csv file that contains the filenames of crystals.
      :param str dataset_path: Path to the dataset. The folder contains DGL binary graph files or files with cif/VASP formate.
      :param float cutoff: Cutoff distance when calculate connections of a crystal.
      :param str mode_of_NN:
      
         .. Hint:: 
            Mode of how to get the neighbors, which can be:
            
            - ``'voronoi'``: consider Voronoi neighbors only.
            - ``'pymatgen_dist'``: build graph based on a constant distance using ``pymatgen`` module.
            - ``'ase_dist'``: build graph based on a constant distance using ``ase`` module.
            - ``'ase_natural_cutoffs'``: build graph from ``ase`` which has a dynamic cutoff scheme. In this case, the ``cutoff`` is deprecated because ``ase`` will use the dynamic cutoffs in ``ase.neighborlist.natural_cutoffs()``.

      :param bool from_binary: Whether the graphs are read from scratch or ``DGL`` binary graph.
      :param int num_of_cores: Number of cores when reading graphs from *cif or VASP file. Read graphs from scratch takes much more time than that from binary file. So I recommend reading *cif or VASP file with multiple CPU cores.
      :param bool super_cell: Repeat small cells or not.
      :param bool include_forces: Store atomic forces on graph or not.


   .. py:property:: dataset_path
      
      Path to the dataset. The folder contains DGL binary graph files or files with cif/VASP formate.
   
   
   .. py:method:: read_batch_graphs(self, batch_index_list, batch_num)
   
      Read graphs with batches. 
      
      .. Note:: The loaded graphs are saved under the attribute of :py:attr:`dataset_path`.
      
      :param list batch_index_list: a list of graph index.
      :param str batch_num: number the graph batches.
      
      
   .. py:method:: read_all_graphs(self, scale_prop=False, ckpt_path='.')
   
      Read all graphs specified in the csv file.
      
      .. Note:: The loaded graphs are saved under the attribute of :py:attr:`dataset_path`.
      
      .. DANGER:: Do not scale the label if you don't know what are you doing.
      
      :param bool scale_prop: scale the label or not. DO NOT scale unless you know what you are doing.
      :param str ckpt_path: checkpoint directory of the well-trained model.
      :Returns: 
         - graph_list： a list of ``DGL`` graph.
         - graph_labels： a list of labels.


.. py:class:: TrainValTestSplit(object)

   Split the dataset.
   
   .. py:method:: __init__(self, validation_size, test_size, csv_file, new_split=True)
      
      :param int/float validation_size: ``int``: number of samples of the validation set. ``float``: portion of samples of the validation set
      :param int/float test_size: ``int``: number of samples of the validation set. ``float``: portion of samples of the validation set
      :param int/float csv_file: ``int``: number of samples of the validation set. ``float``: portion of samples of the validation set
      :param bool new_split: Split the dataset by ``sklearn.model_selection.train_test_split`` or loaded from previously saved txt files.


   .. py:method:: __call__(self):
   
      Write three file: ``'train.txt'``, ``'validation.txt'``, ``'test.txt'`` contains the index of different datasets. The target directory is the directory to the csv file.
      
      :Returns: 
         - train_index : A list of integers of training dataset.
         - validation_index: A list of integers of validation dataset. 
         - test_index: A list of integers of test dataset.


..
 External links are list below:
.. _pymatgen.core.structure: https://pymatgen.org/pymatgen.core.structure.html
.. _ase.atoms: https://wiki.fysik.dtu.dk/ase/ase/atoms.html
.. _ase: https://wiki.fysik.dtu.dk/ase/